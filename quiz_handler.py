from sqlalchemy import Update
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import random

from telegram.ext import CallbackContext, CallbackQueryHandler

from database import session, LearnedWord, User
from dictionary_module import save_learned_words
from word_generator import generate_words_for_topic


async def topic_words_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ callback_data
    topic = query.data.split(":")[1]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
    words = await generate_words_for_topic(topic)

    # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not words:
        await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ '{topic}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_data
    context.user_data["current_words"] = words
    print(words)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    words_text = "\n".join(
        [f"{index + 1}. {word['word']} - {word['translation']}" for index, word in enumerate(words)]
    )
    await query.message.reply_text(f"üìö –°–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ '{topic}':\n\n{words_text}")
    print("–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ –≤ user_data:", context.user_data.get("current_words"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è"
    check_yourself_keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="start_quiz")]]
    await query.message.reply_text(
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(check_yourself_keyboard)
    )
    print("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    # check_yourself_keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="start_quiz")]]
    # await query.message.reply_text(
    #     "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
    #     reply_markup=InlineKeyboardMarkup(check_yourself_keyboard)
    # )
    # print("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

async def start_quiz_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
    quiz_words = context.user_data.get("current_words", [])
    if not quiz_words:
        await query.message.reply_text("‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –∏–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞.")
        print("[ERROR] current_words –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ user_data")
        return

    context.user_data["quiz_words"] = quiz_words
    context.user_data["quiz_index"] = 0
    context.user_data["correct_answers"] = 0

    print(f"[DEBUG] –¢–µ—Å—Ç –Ω–∞—á–∞—Ç. –°–ª–æ–≤–∞: {quiz_words}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(update, context)


async def handle_answer(update, context):
    query = update.callback_query
    await query.answer()

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    try:
        _, user_answer, correct_answer = query.data.split(":")
    except ValueError:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    if user_answer == correct_answer:
        context.user_data["correct_answers"] = context.user_data.get("correct_answers", 0)
        await query.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await query.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data["quiz_index"] = context.user_data.get("quiz_index", 0)
    await send_next_question(update, context)

async def send_next_question(update, context):
    quiz_index = context.user_data.get("quiz_index", 0)
    quiz_words = context.user_data.get("quiz_words", [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if quiz_index >= len(quiz_words):
        await finish_quiz(update, context)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        return

    # –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    current_word = quiz_words[quiz_index]
    word = current_word["word"]
    correct_translation = current_word["translation"]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    all_translations = [w["translation"] for w in quiz_words if w["translation"] != correct_translation]
    options = random.sample(all_translations, k=min(3, len(all_translations))) + [correct_translation]
    random.shuffle(options)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = [
        [InlineKeyboardButton(option, callback_data=f"answer:{option}:{correct_translation}")]
        for option in options
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    await update.callback_query.message.reply_text(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{word}'?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    context.user_data["quiz_index"] = quiz_index + 1


async def finish_quiz(update: Update, context: CallbackContext):
    telegram_id = update.callback_query.from_user.id
    user = session.query(User).filter_by(telegram_id=telegram_id).first()

    if user:
        user_id = user.id
        print(f"[DEBUG] User ID: {user_id}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤
        if 'current_words' in context.user_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await save_learned_words(user_id, context.user_data['current_words'], "–§—Ä—É–∫—Ç—ã")
            print("[DEBUG] –°–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            print("[ERROR] –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Å–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫
        keyboard = [
            [InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu")],
            [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="choose_topic")]
        ]

        await update.callback_query.message.reply_text(
            "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à–∏ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.message.reply_text(
            "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )

async def save_learned_words(user_id, words, topic):
    for word in words:
        new_learned_word = LearnedWord(
            user_id=user_id,
            word=word["word"],
            translation=word["translation"],
            topic=topic
        )
        session.add(new_learned_word)
    session.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" –∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
async def handle_main_menu(update, context):
    main_keyboard = [
        [InlineKeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å", callback_data="dictionary")],
        [InlineKeyboardButton("üìò –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", callback_data="grammar")],
        [InlineKeyboardButton("üóÇ –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å", callback_data="vocabulary")]
    ]
    await update.callback_query.message.reply_text(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(main_keyboard)
    )


async def handle_choose_topic(update, context):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
    topics_keyboard = [
        [InlineKeyboardButton("–§—Ä—É–∫—Ç—ã", callback_data="topic:—Ñ—Ä—É–∫—Ç—ã")],
        [InlineKeyboardButton("–ñ–∏–≤–æ—Ç–Ω—ã–µ", callback_data="topic:–∂–∏–≤–æ—Ç–Ω—ã–µ")],
        [InlineKeyboardButton("–¶–≤–µ—Ç–∞", callback_data="topic:—Ü–≤–µ—Ç–∞")]
    ]
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤:",
        reply_markup=InlineKeyboardMarkup(topics_keyboard)
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
def register_handlers(application):
    application.add_handler(CallbackQueryHandler(handle_main_menu, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(handle_choose_topic, pattern="^choose_topic$"))
async def quiz_topic_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    topic = query.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    topics = context.user_data.get("dictionary_topics", {})
    if topic not in topics:
        await query.message.reply_text("–°–ª–æ–≤–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    quiz_words = [{"word": pair.split(" - ")[0], "translation": pair.split(" - ")[1]} for pair in topics[topic]]

    context.user_data["quiz_words"] = quiz_words
    context.user_data["quiz_index"] = 0
    context.user_data["correct_answers"] = 0

    await query.message.reply_text(f"üß† –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ '{topic}'!")
    await send_next_question(update, context)


async def test_topic_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ callback_data
    topic = query.data.split(":")[1]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    words = session.query(LearnedWord).filter_by(user_id=user.id, topic=topic).all()

    if not words:
        await query.message.reply_text(f"–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã '{topic}'.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ context –¥–ª—è —Ç–µ—Å—Ç–∞
    context.user_data['current_words'] = [{"word": word.word, "translation": word.translation} for word in words]

    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await start_quiz_handler(update, context)

