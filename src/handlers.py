import sys
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from telegram.ext import Application, CommandHandler, CallbackContext
from dictionary_module import *
from quiz_handler import *
from word_generator import generate_words_for_topic
from hashlib import sha256
from datetime import datetime, timedelta

import openai
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext
# from dictionary_module import dictionary_handler, learn_word, repeat_words, lesson_words_handler, vocabulary_handler,topic_words_handler, learn_word_handler, choose_topic_handler, topic_handler
from database import session, User, LearnedWord, Word

from lessons import lessons_data, generate_lesson_content, get_lesson_content
from quiz_handler import start_quiz_handler
from quiz_module import next_word_handler, quiz_answer_handler
# from word_generator import generate_words_for_topic
import subprocess
from dotenv import load_dotenv
# load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á OpenAI
openai_api_key = OPENAI_API_KEY

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not DATABASE_URL:
    raise ValueError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Railway –∏–ª–∏ .env —Ñ–∞–π–ª.")

print("–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    telegram_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = session.query(User).filter_by(telegram_id=telegram_id).first()

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞
        context.user_data["awaiting_login_password"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        context.user_data["awaiting_registration_username"] = True
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")

async def handle_message(update: Update, context: CallbackContext):
    telegram_id = update.message.from_user.id
    text = update.message.text

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get("awaiting_registration_username"):
        context.user_data["registration_username"] = text
        context.user_data["awaiting_registration_username"] = False
        context.user_data["awaiting_registration_password"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    elif context.user_data.get("awaiting_registration_password"):
        username = context.user_data.get("registration_username")
        password_hash = sha256(text.encode()).hexdigest()  # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(username=username, telegram_id=telegram_id, password=password_hash, status="basic")
        session.add(new_user)
        session.commit()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        context.user_data.clear()
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.")
    # –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif context.user_data.get("awaiting_login_password"):
        password_hash = sha256(text.encode()).hexdigest()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –∏ –ø–∞—Ä–æ–ª–µ–º
        user = session.query(User).filter_by(telegram_id=telegram_id, password=password_hash).first()

        if user:
            # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            context.user_data.clear()
            main_keyboard = [
                [InlineKeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å", callback_data="dictionary")],
                [InlineKeyboardButton("üìò –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", callback_data="grammar")],
                [InlineKeyboardButton("üóÇ –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å", callback_data="vocabulary")]
            ]
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(main_keyboard)
            )
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏–ª–∏ –≤—Ö–æ–¥–æ–º
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

async def login(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞:")
    context.user_data["awaiting_login"] = True


async def handle_login(update: Update, context: CallbackContext):
    telegram_id = update.message.from_user.id
    text = update.message.text

    if context.user_data.get("awaiting_login"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["login_username"] = text
        context.user_data["awaiting_login"] = False
        context.user_data["awaiting_login_password"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    elif context.user_data.get("awaiting_login_password"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = context.user_data.get("login_username")
        password_hash = sha256(text.encode()).hexdigest()

        user = session.query(User).filter_by(username=username, password=password_hash).first()

        if user and user.telegram_id == telegram_id:
            # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            context.user_data.clear()
            main_keyboard = [
                [InlineKeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å", callback_data="dictionary")],
                [InlineKeyboardButton("üìò –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", callback_data="grammar")],
                [InlineKeyboardButton("üóÇ –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å", callback_data="vocabulary")]
            ]
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(main_keyboard)
            )
        else:
            # –ù–µ—É–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥
            context.user_data.clear()
            await update.message.reply_text("–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è /login.")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("login", login))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_login))


def restart(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞."""
    update.message.reply_text("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞...")
    subprocess.Popen([sys.executable, 'bot.py'])  # –∑–∞–º–µ–Ω–∏—Ç–µ 'bot.py' –Ω–∞ –≤–∞—à —Å–∫—Ä–∏–ø—Ç
    sys.exit(0)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –Ω–∞—á–∞—Ç—å\n/help - –ü–æ–º–æ—â—å\n/profile - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
async def profile(update: Update, context: CallbackContext):
    telegram_id = update.message.from_user.id

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = session.query(User).filter_by(telegram_id=telegram_id).first()

    if user:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        learned_words = session.query(LearnedWord).filter_by(user_id=user.id).all()

        if learned_words:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤
            words_text = "\n".join([f"{word.word} - {word.translation} ({word.topic})" for word in learned_words])
            await update.message.reply_text(
                f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}\n"
                f"–°–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: {len(learned_words)}\n\n"
                f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n{words_text}"
            )
        else:
            # –ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç
            await update.message.reply_text("–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞
async def send_basic_lesson(update: Update, context: CallbackContext):
    lesson_key = context.user_data.get('current_lesson')
    if not lesson_key:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º.")
        return

    lesson = generate_lesson_content(lesson_key)
    if not lesson or not isinstance(lesson["content"], list):
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    lesson_content = "\n".join(lesson["content"])
    await update.message.reply_text(
        f"üìñ –£—Ä–æ–∫: {lesson['title']}\n\n{lesson_content}\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –≤–≤–µ–¥–∏—Ç–µ /quiz –¥–ª—è —Ç–µ—Å—Ç–∞."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async def dynamic_quiz(update: Update, context: CallbackContext):
    lesson_key = context.user_data.get("current_lesson")
    if not lesson_key:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.")
        return

    lesson = get_lesson_content(lesson_key)
    if not lesson or "quiz" not in lesson or not isinstance(lesson["quiz"], list):
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π.")
        return

    context.user_data["quiz_progress"] = {
        "questions": lesson["quiz"],
        "current_question": 0,
        "correct_answers": 0
    }

    await update.message.reply_text(
        f"üß† –î–∏–Ω–∞–º–∏—á–Ω—ã–π —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {lesson['title']}\n"
        "–Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ!"
    )

    await send_next_dynamic_question(update, context)

async def send_next_dynamic_question(update, context):
    quiz_progress = context.user_data.get("quiz_progress")
    if not quiz_progress:
        await update.message.reply_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /quiz.")
        return

    current_question_index = quiz_progress["current_question"]
    questions = quiz_progress["questions"]

    if current_question_index >= len(questions):
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        await update.message.reply_text(
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! ‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {quiz_progress['correct_answers']} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        context.user_data.pop("quiz_progress", None)
        return

    question = questions[current_question_index]
    options = "\n".join([f"{i + 1}. {opt}" for i, opt in enumerate(question["options"])])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å {current_question_index + 1}: {question['question']}\n{options}"
    )

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    quiz_progress["current_question"] += 1

# async def handle_answer(update: Update, context: CallbackContext):
#     query = update.callback_query
#     print(f"CallbackQuery received: {query}")
#     await query.answer()
#
#     user_answer = query.data
#     quiz_progress = context.user_data.get("quiz_progress")
#
#     if not quiz_progress:
#         await query.message.reply_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /quiz.")
#         return
#
#     current_question_index = quiz_progress["current_question"] - 1
#     current_question = quiz_progress["questions"][current_question_index]
#     correct_answer = current_question["answer"]
#
#     if user_answer == correct_answer:
#         quiz_progress["correct_answers"] += 1
#         await query.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
#     else:
#         await query.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
#
#     await send_next_dynamic_question(update, context)



async def finish_quiz(update: Update, context: CallbackContext):
    quiz_data = context.user_data.get("quiz_progress")
    correct_answers = quiz_data.get("correct_answers", 0)
    total_questions = len(quiz_data.get("questions", []))

    if total_questions == 0:
        await update.message.reply_text("–¢–µ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–∫.")
        return

    score = (correct_answers / total_questions) * 100

    response = (
        f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {correct_answers} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É." if score >= 80 else
        f"‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {correct_answers} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    )

    await update.message.reply_text(response)

    context.user_data["quiz_progress"] = None

# print("Lesson Quiz Data:", lesson["quiz"])

async def show_description(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞."""
    lesson_key = context.user_data.get('current_lesson')
    if not lesson_key:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.")
        return

    lesson = lessons_data[lesson_key]
    description = lesson.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')

    await update.message.reply_text(f"üìò –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞: {lesson['title']}\n\n{description}")

async def update_progress(username: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = session.query(User).filter_by(username=username).first()
    if user:
        if user.progress is None:
            user.progress = 1
        else:
            user.progress += 1
        session.commit()

async def select_lesson(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
    """
    try:
        lesson_number = int(update.message.text) - 1
        lesson_keys = list(lessons_data.keys())

        if lesson_number < 0 or lesson_number >= len(lesson_keys):
            await update.message.reply_text("–£—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        lesson_key = lesson_keys[lesson_number]
        lesson = get_lesson_content(lesson_key)
        print(f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {lesson}")

        if not lesson:
            await update.message.reply_text("–£—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        description = lesson.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        content = "\n".join(lesson["content"]) if isinstance(lesson["content"], list) else lesson["content"]

        await update.message.reply_text(
            f"üìñ –£—Ä–æ–∫: {lesson['title']}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n{content}\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –≤–≤–µ–¥–∏—Ç–µ /quiz –¥–ª—è —Ç–µ—Å—Ç–∞."
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["current_lesson"] = lesson_key

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞.")

async def send_webapp_button(update, context):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
            web_app=WebAppInfo(url="https://060a-185-248-85-26.ngrok-free.app/quiz_buttons.html")
        )]
    ])
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.", reply_markup=keyboard)


async def choose_topic_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º
    keyboard = [
        [InlineKeyboardButton("–ï–¥–∞", callback_data="topic:–µ–¥–∞")],
        [InlineKeyboardButton("–ñ–∏–≤–æ—Ç–Ω—ã–µ", callback_data="topic:–∂–∏–≤–æ—Ç–Ω—ã–µ")],
        [InlineKeyboardButton("–¶–≤–µ—Ç–∞", callback_data="topic:—Ü–≤–µ—Ç–∞")],
        [InlineKeyboardButton("–ì–ª–∞–≥–æ–ª—ã", callback_data="topic:–≥–ª–∞–≥–æ–ª—ã")],
        [InlineKeyboardButton("–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="topic:—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ")],
        [InlineKeyboardButton("–ü—Ä–∏—Ä–æ–¥–∞", callback_data="topic:–ø—Ä–∏—Ä–æ–¥–∞")],
        [InlineKeyboardButton("–°–ø–æ—Ä—Ç", callback_data="topic:—Å–ø–æ—Ä—Ç")],
        [InlineKeyboardButton("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data="topic:–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")],
        [InlineKeyboardButton("–û–¥–µ–∂–¥–∞", callback_data="topic:–æ–¥–µ–∂–¥–∞")],
        [InlineKeyboardButton("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="topic:—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
        [InlineKeyboardButton("–≠–º–æ—Ü–∏–∏", callback_data="topic:—ç–º–æ—Ü–∏–∏")],
        [InlineKeyboardButton("–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data="topic:–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")],
        [InlineKeyboardButton("–•–æ–±–±–∏", callback_data="topic:—Ö–æ–±–±–∏")],
        [InlineKeyboardButton("–í—Ä–µ–º—è", callback_data="topic:–≤—Ä–µ–º—è")],
        [InlineKeyboardButton("–ß–∏—Å–ª–∞", callback_data="topic:—á–∏—Å–ª–∞")],
        [InlineKeyboardButton("–ü—Ä–µ–¥–º–µ—Ç—ã –¥–æ–º–∞", callback_data="topic:–ø—Ä–µ–¥–º–µ—Ç—ã_–¥–æ–º–∞")],
        [InlineKeyboardButton("–¢–µ–ª–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="topic:—Ç–µ–ª–æ_—á–µ–ª–æ–≤–µ–∫–∞")],
        [InlineKeyboardButton("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data="topic:–≥–µ–æ–≥—Ä–∞—Ñ–∏—è")],
        [InlineKeyboardButton("–ú—É–∑—ã–∫–∞", callback_data="topic:–º—É–∑—ã–∫–∞")],
        [InlineKeyboardButton("–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", callback_data="topic:—Ñ—Ä—É–∫—Ç—ã_–æ–≤–æ—â–∏")],
    ]

    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=InlineKeyboardMarkup(keyboard))

async def generate_topic_words_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ callback_data
    topic = query.data.split(":")[1]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ
    words = await generate_words_for_topic(topic)

    if not words:
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    words_text = "\n".join(words)
    await query.message.reply_text(
        f"üìö –°–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ '{topic}':\n\n{words_text}"
    )


async def register_user(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    telegram_id = query.from_user.id
    username = query.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = session.query(User).filter_by(telegram_id=telegram_id).first()
    if user:
        await query.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(username=username, telegram_id=telegram_id, password=None, status="basic")
        session.add(new_user)
        session.commit()
        await query.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("quiz", dynamic_quiz))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery
    application.add_handler(CallbackQueryHandler(topic_words_handler, pattern="^topic:"))

    application.add_handler(CallbackQueryHandler(start_quiz_handler, pattern="^start_quiz$"))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer:"))

    application.add_handler(CallbackQueryHandler(dictionary_handler, pattern="^dictionary$"))
    application.add_handler(CallbackQueryHandler(topic_words_handler, pattern="^topic_words:"))
    application.add_handler(CallbackQueryHandler(quiz_topic_handler, pattern="^quiz_topic:"))

    application.add_handler(CallbackQueryHandler(learn_word_handler, pattern="^learn_word:"))
    application.add_handler(CallbackQueryHandler(repeat_words, pattern="^repeat:"))
    application.add_handler(CallbackQueryHandler(vocabulary_handler, pattern="^vocabulary$"))
    application.add_handler(CallbackQueryHandler(choose_topic_handler, pattern="^choose_topic$"))
    application.add_handler(CallbackQueryHandler(topic_handler, pattern="^topic:"))
    application.add_handler(CallbackQueryHandler(next_word_handler, pattern="^next_word$"))
    application.add_handler(CallbackQueryHandler(test_topic_handler, pattern="^test_topic:"))
    application.add_handler(CallbackQueryHandler(register_user, pattern="^register$"))

    async def debug_callback_query(update, context):
        query = update.callback_query
        await query.answer()
        print(f"[DEBUG] CallbackQuery: {query.data}")

    register_handlers(application)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
