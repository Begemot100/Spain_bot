from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from database import session, User, LearnedWord, Word
from lessons import lessons_data, get_lesson_content
from word_generator import generate_words_for_topic

# –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
words = [
    {"word": "Hola", "translation": "–ü—Ä–∏–≤–µ—Ç"},
    {"word": "Adi√≥s", "translation": "–ü–æ–∫–∞"},
    {"word": "Gracias", "translation": "–°–ø–∞—Å–∏–±–æ"},
    {"word": "Por favor", "translation": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞"},
]

async def dictionary_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    if not user:
        await query.message.reply_text("–í—ã –µ—â—ë –Ω–µ –∏–∑—É—á–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–∞–º
    words_by_topic = session.query(LearnedWord.topic, LearnedWord.word, LearnedWord.translation).filter_by(user_id=user.id).all()

    if not words_by_topic:
        await query.message.reply_text("–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    dictionary_text = ""
    current_topic = None
    for word in words_by_topic:
        if word.topic != current_topic:
            current_topic = word.topic
            dictionary_text += f"\nüìò –¢–µ–º–∞: {current_topic}\n"
        dictionary_text += f" - {word.word} - {word.translation}\n"

    await query.message.reply_text(f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n{dictionary_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞
async def learn_word(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ callback_data
    word_data = query.data.split(":")[1]
    word, translation = word_data.split(" - ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    if user:
        learned_word = LearnedWord(user_id=user.id, word=word, translation=translation)
        session.add(learned_word)
        session.commit()

    await query.message.reply_text(f"–°–ª–æ–≤–æ: {word}\n–ü–µ—Ä–µ–≤–æ–¥: {translation}\n–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–°–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞"
async def vocabulary_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    learned_words = session.query(LearnedWord).filter_by(user_id=user.id).all()

    keyboard = []

    if learned_words:
        keyboard.extend([
            [InlineKeyboardButton(f"{word.word} - {word.translation}", callback_data=f"repeat:{word.id}")]
            for word in learned_words
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É"
    keyboard.append([InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data="choose_topic")])

    if learned_words:
        await query.message.reply_text(
            "–í–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å:", reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.message.reply_text(
            "–í–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –ø—É—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤.", reply_markup=InlineKeyboardMarkup(keyboard)
        )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞
async def repeat_words(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    word_id = int(query.data.split(":")[1])
    learned_word = session.query(LearnedWord).filter_by(id=word_id).first()

    if not learned_word:
        await query.message.reply_text("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await query.message.reply_text(
        f"–°–ª–æ–≤–æ: {learned_word.word}\n–ü–µ—Ä–µ–≤–æ–¥: {learned_word.translation}"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update, context):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤: –°–ª–æ–≤–∞—Ä—å, –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞, –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
async def lesson_words_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —É—Ä–æ–∫–∞
    lesson_key = query.data.split(":")[1]
    lesson = get_lesson_content(lesson_key)

    if not lesson:
        await query.message.reply_text("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ —É—Ä–æ–∫–∞
    words = lesson.get("content", [])
    if not words:
        await query.message.reply_text("–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞
    keyboard = [
        [InlineKeyboardButton(f"{word.split(' - ')[0]}", callback_data=f"learn_word:{word}")]
        for word in words
    ]

    await query.message.reply_text(
        f"üìö –°–ª–æ–≤–∞ –∏–∑ —É—Ä–æ–∫–∞ '{lesson['title']}':",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
async def learn_word_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ callback_data
    word_data = query.data.split(":")[1]
    word, translation = word_data.split(" - ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    if user:
        learned_word = LearnedWord(user_id=user.id, word=word, translation=translation)
        session.add(learned_word)
        session.commit()

    await query.message.reply_text(f"–°–ª–æ–≤–æ: {word}\n–ü–µ—Ä–µ–≤–æ–¥: {translation}\n–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å!")

topics = [
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
    "–ß–∏—Å–ª–∞",
    "–ï–¥–∞",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "–°–µ–º—å—è",
    "–†–∞–±–æ—Ç–∞",
    "–ü–æ–≥–æ–¥–∞",
    "–ú–∞–≥–∞–∑–∏–Ω",
    "–í—Ä–µ–º—è",
    "–•–æ–±–±–∏"
]
async def vocabulary_lessons_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è 10 —Ç–µ–º
    keyboard = [
        [InlineKeyboardButton(topic, callback_data=f"topic:{index}")]
        for index, topic in enumerate(topics)
    ]

    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


example_words = {
    0: ["Hola - –ü—Ä–∏–≤–µ—Ç", "Adi√≥s - –ü–æ–∫–∞", "Gracias - –°–ø–∞—Å–∏–±–æ"],
    1: ["Uno - –û–¥–∏–Ω", "Dos - –î–≤–∞", "Tres - –¢—Ä–∏"],
    2: ["Manzana - –Ø–±–ª–æ–∫–æ", "Naranja - –ê–ø–µ–ª—å—Å–∏–Ω", "Pl√°tano - –ë–∞–Ω–∞–Ω"],
    3: ["Aeropuerto - –ê—ç—Ä–æ–ø–æ—Ä—Ç", "Hotel - –û—Ç–µ–ª—å", "Pasaporte - –ü–∞—Å–ø–æ—Ä—Ç"],
    4: ["Madre - –ú–∞—Ç—å", "Padre - –û—Ç–µ—Ü", "Hermano - –ë—Ä–∞—Ç"],
    5: ["Oficina - –û—Ñ–∏—Å", "Jefe - –ù–∞—á–∞–ª—å–Ω–∏–∫", "Trabajo - –†–∞–±–æ—Ç–∞"],
    6: ["Sol - –°–æ–ª–Ω—Ü–µ", "Lluvia - –î–æ–∂–¥—å", "Viento - –í–µ—Ç–µ—Ä"],
    7: ["Pan - –•–ª–µ–±", "Leche - –ú–æ–ª–æ–∫–æ", "Carne - –ú—è—Å–æ"],
    8: ["Hora - –ß–∞—Å", "Minuto - –ú–∏–Ω—É—Ç–∞", "Segundo - –°–µ–∫—É–Ω–¥–∞"],
    9: ["Leer - –ß–∏—Ç–∞—Ç—å", "Correr - –ë–µ–≥–∞—Ç—å", "Pintar - –†–∏—Å–æ–≤–∞—Ç—å"]
}
async def topic_words_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    topic = query.data.split(":")[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # context.user_data["current_words"] = [
    #     {"word": "tiempo", "translation": "–≤—Ä–µ–º—è"},
    #     {"word": "hora", "translation": "—á–∞—Å"},
    #     {"word": "minuto", "translation": "–º–∏–Ω—É—Ç–∞"},
    #     {"word": "segundo", "translation": "—Å–µ–∫—É–Ω–¥–∞"},
    #     {"word": "ma√±ana", "translation": "—É—Ç—Ä–æ"},
    #     {"word": "tarde", "translation": "–≤–µ—á–µ—Ä"},
    #     {"word": "noche", "translation": "–Ω–æ—á—å"},
    #     {"word": "semana", "translation": "–Ω–µ–¥–µ–ª—è"},
    #     {"word": "mes", "translation": "–º–µ—Å—è—Ü"},
    #     {"word": "a√±o", "translation": "–≥–æ–¥"},
    # ]
    # print(f"–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ –≤ user_data: {context.user_data['current_words']}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    words_text = "\n".join(
        [f"{index + 1}. {word['word']} - {word['translation']}" for index, word in enumerate(context.user_data["current_words"])]
    )
    await query.message.reply_text(f"üìö –°–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ '{topic}':\n\n{words_text}")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è"
    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è'...")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    check_yourself_keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="start_quiz")]]
    await query.message.reply_text(
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(check_yourself_keyboard)
    )
    print("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    print("–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞ –≤ user_data:", context.user_data.get("current_words"))

async def choose_topic_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
    topics = [
        "–ï–¥–∞", "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "–¶–≤–µ—Ç–∞", "–ß–∏—Å–ª–∞", "–ü—Ä–∏—Ä–æ–¥–∞",
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–°–ø–æ—Ä—Ç", "–û–¥–µ–∂–¥–∞", "–≠–º–æ—Ü–∏–∏", "–†–∞–±–æ—Ç–∞"
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(topic, callback_data=f"topic:{topic.lower()}")]
        for topic in topics
    ]

    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )
async def topic_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ callback_data
    topic = query.data.split(":")[1]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã —Å –ø–æ–º–æ—â—å—é OpenAI
    words = await generate_words_for_topic(topic)

    # –ï—Å–ª–∏ OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not words:
        await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ '{topic}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ user_data
    context.user_data["current_words"] = words

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    words_text = "\n".join([f"{index + 1}. {word['word']} - {word['translation']}" for index, word in enumerate(words)])
    await query.message.reply_text(f"üìö –°–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ '{topic}':\n\n{words_text}")

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è"
    check_yourself_keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="start_quiz")]]
    await query.message.reply_text(
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(check_yourself_keyboard)
    )


    # check_yourself_keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="start_quiz")]]
    # await query.message.reply_text(
    #     "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
    #     reply_markup=InlineKeyboardMarkup(check_yourself_keyboard)
    # )
    #
    # print("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
async def save_learned_words(user_id, words, topic):
    try:
        print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞: {words} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ç–µ–º–æ–π {topic}")
        for word in words:
            learned_word = LearnedWord(
                user_id=user_id,
                word=word['word'],
                translation=word['translation'],
                topic=topic
            )
            session.add(learned_word)
        session.commit()
        print("[DEBUG] –°–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤: {e}")
        session.rollback()

